name: Build and Deploy to Kubernetes

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.REGISTRY_URL }}
  IMAGE_NAME: test-app
  YC_OAUTH_TOKEN: ${{ secrets.YC_OAUTH_TOKEN }}
  YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
  YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
  YC_CLUSTER_ID: ${{ secrets.YC_CLUSTER_ID }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: oauth
        password: ${{ secrets.YC_OAUTH_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Install Yandex Cloud CLI
      if: env.YC_OAUTH_TOKEN != ''
      shell: bash
      run: |
        curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -a
        echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH

    - name: Authenticate YC with OAuth token and fetch kubeconfig
      if: env.YC_SA_KEY_JSON == '' && env.YC_OAUTH_TOKEN != ''
      shell: bash
      run: |
        yc config profile create gha
        yc config set token "${{ env.YC_OAUTH_TOKEN }}"
        yc config set cloud-id "${{ env.YC_CLOUD_ID }}"
        yc config set folder-id "${{ env.YC_FOLDER_ID }}"
        yc managed-kubernetes cluster get-credentials --id "${{ env.YC_CLUSTER_ID }}" --external
    

    - name: Ensure Kubernetes API server uses port 6443
      shell: bash
      run: |
        # Decide which kubeconfig file to edit
        if [ -f kubeconfig.yaml ]; then
          export KUBECONFIG=kubeconfig.yaml
          CFG=kubeconfig.yaml
        else
          mkdir -p "$HOME/.kube"
          CFG="$HOME/.kube/config"
          export KUBECONFIG="$CFG"
        fi
        # Pick first cluster name from kubeconfig
        CLUSTER_NAME=$(kubectl config get-clusters | tail -n +2 | head -n 1)
        if [ -z "$CLUSTER_NAME" ]; then
          echo "No clusters found in kubeconfig" >&2
          exit 1
        fi
        # Determine desired server URL from current kubeconfig
        CURRENT_SERVER=$(kubectl config view -o jsonpath='{.clusters[?(@.name=="'"$CLUSTER_NAME"'")].cluster.server}')
        # If CURRENT_SERVER has no explicit port, append :6443
        # Preserve scheme and host; handle potential path parts
        if echo "$CURRENT_SERVER" | grep -Eq '^https?://[^/]+(:[0-9]+)?(/.*)?$'; then
          SCHEME_HOST=$(echo "$CURRENT_SERVER" | sed -E 's#^(https?://[^/:/]+)(:([0-9]+))?(.*)$#\1#')
          HAS_PORT=$(echo "$CURRENT_SERVER" | sed -nE 's#^https?://[^/:/]+:([0-9]+).*$#\1#p')
          REST_PATH=$(echo "$CURRENT_SERVER" | sed -E 's#^(https?://[^/]+)(/.*)?$#\2#')
          if [ -z "$HAS_PORT" ]; then
            SERVER_TARGET="${SCHEME_HOST}:6443${REST_PATH}"
          else
            SERVER_TARGET="$CURRENT_SERVER"
          fi
        else
          # Fallback: if format unexpected, just leave as is
          SERVER_TARGET="$CURRENT_SERVER"
        fi
        echo "Using API server: $SERVER_TARGET"
        kubectl config set-cluster "$CLUSTER_NAME" --server="$SERVER_TARGET" --kubeconfig="$CFG"
        
    - name: Update Kubernetes deployment
      run: |
        # Use default kubeconfig from YC step; fallback to local file if present
        if [ -f kubeconfig.yaml ]; then export KUBECONFIG=kubeconfig.yaml; fi
        
        # Get the image tag from the build job
        IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
        if [ -z "$IMAGE_TAG" ]; then
          # Fallback to tag name if version is not available
          IMAGE_TAG="${GITHUB_REF#refs/tags/}"
        fi
        
        LATEST_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG"
        
        echo "Deploying image: $LATEST_IMAGE"
        
        # Update the deployment with new image tag
        kubectl set image deployment/test-app test-app=$LATEST_IMAGE
        
        # Add timestamp annotation to force restart if image is the same
        kubectl patch deployment test-app -p '{"spec":{"template":{"metadata":{"annotations":{"date":"'$(date +%s)'"}}}}}'
        
        # Wait for rollout to complete
        kubectl rollout status deployment/test-app --timeout=300s
        
        # Verify the deployment
        kubectl get pods -l app=test-app
        
        echo "Successfully deployed $IMAGE_TAG to Kubernetes cluster"
        
    - name: Cleanup
      if: always()
      run: |
        rm -f kubeconfig.yaml || true
